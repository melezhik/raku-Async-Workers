use v6.d;
use Test;
use Async::Workers;
use Async::Msg;

plan 3;

subtest "Basics" => {
    plan 6;
    my $w = Async::Workers.new(:max-workers(10));

    is $w.workers, 0, "No workers on start";

    $w.do-async: {pass "Async job"};

    sleep .1;
    is $w.workers, 10, "Vivified all workers on demand";

    $w.workers(15);

    sleep .1;
    is $w.workers, 15, "Started 5 additional";

    $w.workers(12);

    sleep .1;
    is $w.workers, 12, "Shut down 3 workers";

    $w.shutdown;

    sleep .1;
    is $w.workers, 0, "Shut down all workers";
}

subtest "Limited queue" => {
    plan 50;
    my @w;
    for 1..50 {
        my $w = Async::Workers.new(:hi-threshold(20));
        # @w.push: $w;

        my atomicint $fulls = 0;
        my atomicint $lows = 0;
        my atomicint $empties = 0;

        $w.on_msg: -> $msg {
            if $msg ~~ Async::Msg::Queue {
                given $msg.status {
                    when QFull {
                        $fulls⚛++;
                    }
                    when QEmpty {
                        $empties⚛++;
                    }
                    when QLow {
                        $lows⚛++;
                    }
                }
            }
        };

        for 1...100 -> $cnt {
            $w.do-async: {
                sleep .01;
            };
        }

        $w.shutdown;

        ok $fulls > 1, "queue full";
    }
}

subtest "Await Workers" => {
    plan 3;

    my $w = Async::Workers.new;

    my $awaited = False;

    await Promise.anyof:
        Promise.in(.1),
        start {
            $w.await;
            $awaited  = True;
        };

    ok $awaited, "await on fresh state";

    my atomicint $counter ⚛= 0;
    for 1..20 {
        $w.do-async: {
            sleep .1.rand;
            $counter⚛++;
        }
    }

    $awaited = False;
    await Promise.anyof:
        Promise.in(10),
        start {
            $w.await;
            $awaited = True;
        };

    ok $awaited, "await for non-finished queue";

    is $counter, 20, "all workers completed";
}

done-testing;
